#東方弾幕風[Single]
#ScriptVersion[3]
#Title["Ex　ボス会話B-2"]
#Text["Ex　ボス会話B-2"]
#Background[""]
#System["./../../../system/System_Main.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"

#include"./../lib/lib_talk.dnh"


@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult( 0);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(-1);	}
	BossEvent();
}

@Initialize {
	Boss_Init();	//初期設定
	objEnemy  = CreateBossTalk(BOSS_ID_KAYANO);
	Obj_SetVisible(GetBossImageID(objEnemy), false);	//画像非表示
	Task_Main();
}

@MainLoop {
	yield;

}

// メインタスク
task Task_Main()
{
	// 魔法陣リセット
	BossEffect_ResetMagicCircle();

	// 会話準備
	StartTalk();

	// 登場モーション（最初は非表示）
	let xIni = CenX;
	let yIni = 140;
	wait(60);
	
	let resultSkilp = FuncTalk();
	
	// 遷移えへくと
	if (!resultSkilp)
	{
		if (GetPlayMode() == GAME_MAIN)
		{
			wait(30);
			Swich_Talk02B();
		}
		FinishTalk(true);
		wait(60);

		// 会話準備
		StartTalk();

		FuncTalk2();
	}
	FinishTalk(true);
	//次のシーンへ
	Boss_Finalize(objEnemy, false, false);
}

// 会話処理
function FuncTalk()
{
	// オブジェクト作成
	let cutinBoss3   = CreateTalkObjectEx(BOSS_ID_UKA, true, 128, -8);
	let cutinBoss2   = CreateTalkObjectEx(BOSS_ID_TENYU, true, 0, 0);
	let cutinBoss1   = CreateTalkObjectEx(BOSS_ID_KAYANO, true, -32, 0);
	let cutinPlayer1 = CreateTalkObject(BOSS_ID_MARISA, false);
	let cutinPlayer2 = CreateTalkObject(BOSS_ID_RINNE, false);
	let cutinDescri  = CreateDescriptiveObject();
	
	// 画像ファイル
	let pathBoss1 = imgCharaKayano;
	let pathBoss2 = imgCharaTenyu;
	let pathBoss3 = imgCharaUka;
	let pathPlayer1 = imgCharaMarisa;
	let pathPlayer2 = imgCharaRinne;
	
	// 隠す
	SetImageVisible(cutinBoss3, false);
	// 最初に前に出てくるキャラ
	SetImageFoward(cutinPlayer2, true);
	
	let resultSkilp = true;
	let cursorSkip = false;
	
	wait(15);
	
	let talkID = 0;
	loop
	{
		cursorSkip = false;
		let talkType = FuncTalkSingle(talkID);
		if (talkType == 0) { break; }
		if (cursorSkip) { talkID = max(0, talkID+1); }
		else { talkID = max(0, talkID+WaitNext()); }
	}
	return(resultSkilp);

	// 会話処理単発（巻き戻しも出来るように）
	function FuncTalkSingle(talkID)
	{
		let xIni = CenX;
		let yIni = 140;
		
		let talk_type = 1;
		alternative(talkID)
		case(0)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinPlayer2, "公主大人，我投降！");
		}
		case(1)
		{

			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss2, "真亏你做出了这么了不得的事情呢，白菊。");
		}
		case(2)
		{
			SetImageVisible(cutinBoss3, false);
			SetImageVisible(cutinBoss2, true);
			
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinPlayer2, "不过，[r]是怎么知道是我干的呢？");
		}
		case(3)
		{
			SetImageVisible(cutinBoss3, true);
			SetImageVisible(cutinBoss2, false);
			
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[4]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss3, "是我推理出来的！");
		}
		case(4)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[4]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[4]);
			SetTalkEx(cutinPlayer2, "什，什么啊……竟然是羽日……");
		}
		case(5)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[4]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[4]);
			SetTalkEx(cutinPlayer2, "哈，原来你用能力算出了和异变有关的人数！");
		}
		case(6)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[4]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss3, "咦？啊，还有这一手啊！[r]真没想到！");
		}
		case(7)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss3, "不过我有像中将阁下你说得一样，[r]好好地“观察”着你！");
		}
		case(8)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[5]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss1, "还是一副抓不住重点的老样子呢。");
		}
		case(9)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[2]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss1, "不过能推理到这一步，[r]令人佩服。");
		}
		case(10)
		{
			SetTalkEx(cutinDescri, "※注意[r]接下来将播放推理对话，内容相当冗长。");
		}
		case(11)
		{
			SetTalkEx(cutinDescri, "要跳过解決篇吗？");

			let tmp_res = SetChoiseWindow(72, 404, ["否", "是"]);
			if (tmp_res == 1) { resultSkilp = true; }
			else { resultSkilp = false; }
			// 発言自動送り
			cursorSkip = true;
		}
		others
		{
			return(0);
		}
		return(talk_type);
	}
}

// 解決編
function FuncTalk2()
{
	// オブジェクト作成
	let cutinBoss3   = CreateTalkObjectEx(BOSS_ID_UKA, true, 92-256, -24-8);
	let cutinBoss2   = CreateTalkObjectEx(BOSS_ID_TENYU, true, -64-256, -24);
	let cutinBoss1   = CreateTalkObjectEx(BOSS_ID_KAYANO, true, 64-256, -24);
	let cutinPlayer1 = CreateTalkObjectEx(BOSS_ID_MARISA, false, -16, -24);
	let cutinPlayer2 = CreateTalkObjectEx(BOSS_ID_RINNE, false, 80, -24);
	let cutinDescri  = CreateDescriptiveObject_Umineko();
	
	Obj_SetValue(cutinBoss1, "BOSS_NAME", "萱野美华");
	Obj_SetValue(cutinBoss2, "BOSS_NAME", "天雄·萱野芽出");
	Obj_SetValue(cutinBoss3, "BOSS_NAME", "门冬羽日");
	Obj_SetValue(cutinPlayer1, "BOSS_NAME", "雾雨魔理沙");
	Obj_SetValue(cutinPlayer2, "BOSS_NAME", "白菊·萱野·L");
	
	// 画像ファイル
	let pathBoss1 = imgCharaKayano;
	let pathBoss2 = imgCharaTenyu;
	let pathBoss3 = imgCharaUka;
	let pathPlayer1 = imgCharaMarisa;
	let pathPlayer2 = imgCharaRinne;
	
	// 隠す
	HideAllCutin();
	
	wait(15);
	
	let talkID = 0;
	loop
	{
		let talkType = FuncTalkSingle(talkID);
		if (talkType == 0) { break; }
		talkID = max(0, talkID+WaitNext());
	}

	// 会話処理単発（巻き戻しも出来るように）
	function FuncTalkSingle(talkID)
	{
		let xIni = CenX;
		let yIni = 140;
		
		let talk_type = 1;
		alternative(talkID)
		case(0)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "暴露了就没办法了[r]也加上我一起来推理show吧。");
		}
		case(1)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "呜呜呜。");
		}
		case(2)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "首先从时间顺序开始吧！");
		}
		case(3)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "一周目灵梦线（以下简称灵梦1）中，[r]提到过“皆故在前几天把得敏当做异变的犯人给打败了”，因此顺序是早苗1、灵梦1！");
		}
		case(4)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "魔理沙1中，得敏也说过前几天被皆故所袭击吧？[r]因此顺序是早苗1、魔理沙1。");
		}
		case(5)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "而且，魔理沙1的一面中，雨品龙姐妹曾说前几天同胞被似乎是异变犯人的人物所袭击了。");
		}
		case(6)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "这个情报正是出现在灵梦1中，得敏让雨品龙姐妹知道自己被袭击过的事之后。[r]所以，早苗1、灵梦1、魔理沙1。");
		}
		case(7)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "虽然有人可能会觉得，会不会有“在没有描写的部分里，得敏通知了爱宕军”的可能性。");
		}
		case(8)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko_Red(cutinDescri, cutinBoss1, "不过，[r]正是推理的守则哦。",
				"　　　“只能使用已被提示的信息”");
		}
		case(9)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "因为极其重要，这个似乎是写在了Hint6里。");
		}
		case(10)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "一周目里这个时间顺序推理是最难的啊！[r]不如说二周目时的时间顺序很简单了！");
		}
		case(11)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "魔理沙2里中将阁下解决了异变。[r]灵梦2的途中，异变被解决了。[r]早苗2是在异变解决之后！");
		}
		case(12)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko_Red(cutinDescri, cutinPlayer1, "问题是犯人。首先灵梦2中提示了[r][r]这件事。",
				"[r]“黑幕被打倒之后就不得不把异变停下”");
		}
		case(13)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "用单纯的排除法的话，连得敏都有可能在被我打倒之后开始异变，但这里的问题是动机。");
		}
		case(14)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "首先，从动机出发，列出不可能的东西。[r]得敏确实理论上有可能在被打倒后继续异变，但问题是停下的时机。");
		}
		case(15)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "在皆故以外的人是犯人的情况下，犯人为了陷害皆故，而在那个时机把异变停下。");
		}
		case(16)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "这是利用符卡规则的诡计哦！");
		}
		case(17)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "既然被打败了就不得不把异变停下的话，在别人被打败的瞬间主动停止异变，就能嫁祸给别人了！");
		}
		case(18)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "这样一来，得敏被打败之后开始异变，就非常奇怪了。");
		}
		case(19)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "要如何判断把异变停下的时机呢？");
		}
		case(20)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "其实是在偷偷地观察着吗？[r]或者是停下异变的时机恰好撞上了？");
		}
		case(21)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "不，那不可能。[r]因为这些情报没有被提示过。。");
		}
		case(22)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "果然那个『没被提示』的概念很重要呢。");
		}
		case(23)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "这么说来，说到底要是考虑动机时，没被提示过的东西就不能用的话，");
		}
		case(24)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "得敏的动机就只能是『想要做实验』了。");
		}
		case(25)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[4]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "那么，被皆故打败后开始异变的情况又如何呢？[r]在此期间进行实验？");
		}
		case(26)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[5]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "要是那样的话，就只能是白菊来接手异变，但是白菊又没有接手的动机。");
		}
		case(27)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "对白菊而言，只要打败得敏就是大功一件啊。");
		}
		case(28)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "被皆故阁下打败之前又如何呢？[r]在此期间进行实验，之后皆故阁下接手，这样的话……");
		}
		case(29)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "皆故被打倒之后接手的人就没有了。[r]因此，得敏从一开始就失去了是犯人的可能性。");
		}
		case(30)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "接着是假设皆故是犯人的情况！[r]被打败之后异变仍然继续，因此，和中将阁下有关就是确定的了！");
		}
		case(31)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "不过，等一下。[r]在什么时机接手，这个双方是在什么时候了解的啊？");
		}
		case(32)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "说到底皆故阁下和白菊直到魔理沙2为止都没有见过面，因此这两人之间的接手是不可能的吧？");
		}
		case(33)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "因此，剩下的就只有直到异变解决为止一次都没有被打败过的小白了吧。");
		}
		case(34)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[4]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "等一下！[r]你们要是想像这样用什么“提示过的情报”把我认定成犯人的话，我也有所反驳！");
		}
		case(35)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[4]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "到底魔理沙在本篇里一直和我在一起，和其他路线有没有接点可没有提示过啊");
		}
		case(36)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[4]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "其他路线的会话什么的，这些证据魔理沙不可能知道！");
		}
		case(37)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "喂喂，你在想什么啊，干嘛一连说出那么多超游发言？");
		}
		case(38)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "在灵梦2的Ending里也说过了吧。[r]“快把对话文本拿过来”什么的。");
		}
		case(39)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "登场人物有知道全部对话文本的手段，这件事可是有好好『提示过』啊。");
		}
		case(40)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[4]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "不过，接下来才是问题。[r]说到底，小白一个人是犯人，动机对得上吗？");
		}
		case(41)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[4]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "中将阁下为何特意要做这种像是要陷害她自己所打造的神一样的事情呢？");
		}
		case(42)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[5]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "我也被这一点误导了，从一开始就觉得犯人一定是在中途被替换了。");
		}
		case(43)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "说到底，因为题目形式是选择题，所以迄今为止才能做出这样的推理，");
		}
		case(44)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "不过推理小说的推理，本来并不是这种排除其他的可能性之类的东西。");
		}
		case(45)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "而是将证据拼在一起，描绘出由犯人出发的故事。");
		}
		case(46)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "那么，我们来对照一下时间顺序，探索一下中将阁下行动的理由吧！");
		}
		case(47)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "对小白而言，引发异变有什么好处？");
		}
		case(48)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "其一是，把它归咎于爱宕军，立下解决异变的功绩。");
		}
		case(49)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "但是某件事使她产生了不好的念头。");
		}
		case(50)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "开端是异变之前。给皆故取名时候的事情。");
		}
		case(51)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "打造了忘却之神后，要是发生了会将其信仰涂抹干净的异变，会怎么样呢？");
		}
		case(52)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "而且，如果说那个会这么做的，是爱宕军呢？");
		}
		case(53)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "背景故事里也有提到过。");
		}
		case(54)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "“决不能让信仰被覆盖”。[r]像这样唆使皆故与得敏战斗，让皆故输给得敏！");
		}
		case(55)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "从旁观察的话，得敏是为了实验，夺走我军所打造的神的信仰的罪大恶极之人。");
		}
		case(56)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "然后白菊将她打败、解决异变，将悲剧的女主角从爱宕救回来——这样，剧情就完成了。");
		}
		case(57)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "但是她计算失误了。[r]小白肯定没想到吧。万万没想到，“皆故竟然赢了”。");
		}
		case(58)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "魔理沙1里，有过“身为爱宕军的第一书记，这样还真是丢人”这样的话。[r]你是承认得敏的实力的。。");
		}
		case(59)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "所以，万万想不到竟然会输给皆故啊。");
		}
		case(60)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "实际上，如果只是推理犯人的话，得敏是个嫌疑相当小的人物。");
		}
		case(61)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "但特意去将这样一个角色加入嫌疑犯名单里，这件事就说明，在推理动机时，她就会成为重要人物。");
		}
		case(62)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "灵梦1Ending中说过，爱宕和公主大人都不喜欢给普通人添麻烦。");
		}
		case(63)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "因此，白菊就陷入了两难。[r]本该被当做犯人的角色，却产生了不可能引发异变的状况。");
		}
		case(64)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "于是动机在这里换了。[r]不是替换犯人，而是把谁陷害成犯人。");
		}
		case(65)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "这一瞬间，动机从“利益”，变成了“自保”！");
		}
		case(66)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "这样，她就无可奈何地要去打败皆故，把罪行推给她了！");
		}
		case(67)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "但是这里又一次计算失误。[r]恐怕原本是打算就此全部解决的。");
		}
		case(68)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "魔理沙1里，得敏没有对白菊说过，曾经和灵梦一起讨伐过皆故。");
		}
		case(69)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "魔理沙2的最后，你也焦急起来了吧。[r]不管怎么说，变成谁都没法被陷害为异变的犯人的情况了。");
		}
		case(70)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "之后就是想把事情含糊其辞地蒙混过关，不过结果就变成这样了。");
		}
		case(71)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "完全…正确…");
		}
		case(72)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[4]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "虽然不至于将你降格，但暂时要剥夺你的职位。当个实习生，反省一段时间吧。");
		}
		case(73)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "正好，羽日是同期对吧。[r]你就担任白菊的指导职位吧。。");
		}
		case(74)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "因为你看穿了身居要职者的不正行为啊。我也会为你在人事部提请升格的。");
		}
		case(75)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "不胜荣幸！");
		}
		case(76)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "好、好死不死居然是羽日！？");
		}
		case(77)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "嗯嗯～？您说什么呐～？[r]对待上级，是这种说话方式吗～！");
		}
		case(78)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "从今往后，我会好好疼爱您的哟！[r]小白！");
		}
		case(79)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[2]);
			SetTalkEx_Umineko(cutinDescri, -1, "羽日有考虑过白菊恢复阶级之后的事情吗？");
		}
		case(80)
		{
			SetTalkEx_Umineko(cutinDescri, -1, "魔理沙直觉上认为，那家伙是个在权力中溺亡的类型啊。");
		}
		case(81)
		{
			SetTalkEx_Umineko(cutinDescri, -1, "然后，再次被卷进如此丑陋的权力斗争当中什么的还是免了，魔理沙是这么想的。");
		}
		others
		{
			return(0);
		}
		return(talk_type);
	}
}


//遷移えへくと
task Swich_Talk02B()
{
	//レンダリングターゲットに使用するテクスチャ
	let renderTexture = GetReservedRenderTargetName(0);
	RenderToTextureA1(renderTexture, 0, 100, true);

	//--------------------------------
	let objImg = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	ObjPrim_SetTexture(objImg, renderTexture); //テクスチャを設定
	ObjSprite2D_SetSourceRect(objImg, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(objImg, 0, 0, GetScreenWidth, GetScreenHeight);
	Obj_SetRenderPriorityI(objImg, 100);

	//ゆがみオブジェクトにシェーダを設定
	ObjShader_SetShaderF(objImg, hlslNoise);
	ObjShader_SetTechnique(objImg, "TecNoise");

	let t = 0;
	loop(30)
	{
		//シェーダにパラメータを設定
		let power = t/30;
		ObjShader_SetFloat(objImg, "seed_", t);
		ObjShader_SetFloat(objImg, "power_", power);	// power＝歪み率(%)
		t++;
		yield;
	}

	// 枠を取っ払う
	SetAreaCommonData(CAREA_SYSTEM, "StgWorldBreak", true );
	SetStgFrame(0, 0, GetScreenWidth, GetScreenHeight, 20, 80);

	ascent(i in 0 .. 120)
	{
		//シェーダにパラメータを設定
		let power = 1 - i/120;
		ObjShader_SetFloat(objImg, "seed_", t);
		ObjShader_SetFloat(objImg, "power_", power);	// power＝歪み率(%)
		ObjRender_SetAlpha(objImg, 255 * (1-i/60));
		t++;
		yield;
	}
	Obj_Delete(objImg);
	ClearInvalidRenderPriority();
}



// --- 以下は地の文用の会話枠

let baseWidth_Umi = GetScreenWidth;
let baseHeight_Umi = 128;
let baseX_Umi = 64;
let baseY_Umi = GetScreenHeight -16;

let baseTextX_Umi = baseX_Umi+32;
let baseTextY_Umi = baseY_Umi+10 - 96;


// 会話メッセージ（吹き出し消去機能つき）
{
	Obj_SetValue(objDes, "TEXT_RED", red_text);
	
	// スペースに置換
	function GetSpaceText(text)
	{
		let result_text = "";
		let tmp_obj = ObjText_Create();
		ascent(i in 0 .. length(red_text))
		{
			ObjText_SetText(tmp_obj, red_text[i]);
			let tlen = ObjText_GetTextLength(tmp_obj);
			if (tlen == 1) { result_text = result_text ~ " "; }
			else if (tlen == 2) { result_text = result_text ~ "　"; }
		}
		Obj_Delete(tmp_obj);
		return(result_text);
	}
}
{
	Obj_SetValue(objDes, "TEXT_RED", "");
}
{
	// 名前取得
	let e_name = "";
	if (!Obj_IsDeleted(objCutin)) { e_name = Obj_GetValueD(objCutin, "BOSS_NAME", ""); }
	// 吹き出しリセット
	SetFukidashiType(objDes, FUKIDASHI_NORMAL);
	// 吹き出し削除
	DeleteAllFukidashi();
	// カットインを隠す
	HideAllCutin();
	// 会話
	_SetTalk(objDes, text, 0, 0);
	// 名前セット
	Obj_SetValue(objDes, "NAME", e_name);
	// カットインを前面に出す
	if (!Obj_IsDeleted(objCutin))
	{
		ChangeImageFoward(objCutin);
		SetImageVisible(objCutin, true);
	}
}

// カットインを隠す
function HideAllCutin()
{
	ascent(i in 0 .. length(objTalkObject))
	{
		SetImageVisible(objTalkObject[i], false);
	}
}

// 地の文を出したい場合はこちら！
function CreateDescriptiveObject_Umineko()
{
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetValue(obj, "DES", true);		// 地の文フラグ立て
	Obj_SetValue(obj, "FW", false);
	ChangeDescriptive_Umineko(obj);
	objTalkObject = objTalkObject ~ [obj];	//配列に登録
	return(obj);
}


// 吹き出し変更監視（地の文用）
task ChangeDescriptive_Umineko(parent)
{
	let objFukidashi = -1;
	let objText = -1;
	let objTextRed = -1;
	
	let f_position = Obj_GetValueD(parent, "F_POSITION", 1);
	let before_tx = Obj_GetValueD(parent, "TEXT", "");
	let before_tn = Obj_GetValueD(parent, "NAME", "");
	while(!Obj_IsDeleted(parent))
	{
		if (Obj_GetValueD(parent, "NEXT", false))
		{
			let tx = Obj_GetValueD(parent, "TEXT", "");
			let tx_red = Obj_GetValueD(parent, "TEXT_RED", "");
			let tn = Obj_GetValueD(parent, "NAME", "");
			if (length(tx) > 0)
			{
				if (length(before_tx) > 0)
				{
					// 連続会話時は吹き出し変更チェックのみ
					ChangeDescriptiveFrame_Umineko(objFukidashi, [0, 1][length(tn)>0]);
				}
				else
				{
					// 吹き出し削除→配置
					if (objFukidashi != -1) { DeleteFukidashi(objFukidashi); }
					objFukidashi = _MakeDescriptiveFrame_Umineko(99);
					ChangeDescriptiveFrame_Umineko(objFukidashi, [0, 1][length(tn)>0]);
				}
				// テキスト削除→配置
				if (objText != -1) { DeleteFukidashi(objText); }
				if (objTextRed != -1) { DeleteFukidashi(objTextRed); }
				objText = _MakeDescriptiveText_Umineko(tx, 99, 0);
				objTextRed = _MakeDescriptiveText_Umineko(tx_red, 99, 1);
				// 名前せっつ
				Obj_SetValue(objFukidashi, "NAME", tn);
			}
			else
			{
				if (objFukidashi != -1) { DeleteFukidashi(objFukidashi); }
				if (objText != -1) { DeleteFukidashi(objText); }
				if (objTextRed != -1) { DeleteFukidashi(objTextRed); }
			}
			Obj_SetValue(parent, "TEXT", "");
			Obj_SetValue(parent, "TEXT_RED", "");
			Obj_SetValue(parent, "NEXT", false);
			before_tx = tx;
			before_tn = tn;
		}
		yield;
	}
	if (objFukidashi != -1) { DeleteFukidashi(objFukidashi); }
	if (objText != -1) { DeleteFukidashi(objText); }
}

// 吹き出しを設置する（文字）
function _MakeDescriptiveText_Umineko(text, t_priority, t_type)
{
	// テキスト作るよ！
	let objText = DesText(t_priority);
	ObjText_SetText(objText, text);
	ObjText_SetTransCenter(objText, 0, baseHeight_Umi-48);
	ObjRender_SetPosition(objText, baseTextX_Umi, baseTextY_Umi, 0);
	if (t_type)
	{
		ObjText_SetFontBorderColor(objText, 0, 0, 0);
		ObjRender_SetColor(objText, 255, 0, 0);
		ObjText_SetFontBold(objText, true);
	}
	
	DescriptiveMotion(objText);
	return(objText);
	
	task DescriptiveMotion(objText)
	{
		ascent(i in 0 .. 10)
		{
			let tmp = (i+1)/10;
			ObjRender_SetScaleY(objText, tmp);
			yield;
		}
		while(!Obj_IsDeleted(objText))
		{
			if (Obj_GetValueD(objText, "DELETED", false)) { break; }
			yield;
		}
		descent(i in 0 .. 10)
		{
			let tmp = (i+1)/10;
			ObjRender_SetScaleY(objText, tmp);
			yield;
		}
		Obj_Delete(objText);
	}
}

function DesText(t_priority)
{
	let objText = ObjText_Create();
	Obj_SetRenderPriorityI(objText, t_priority);
	ObjText_SetFontType(objText, baseFont);
	ObjText_SetFontSize(objText, baseFontSize);
	ObjText_SetFontBold(objText, false);
	ObjText_SetLinePitch(objText, baseFontLinePitch);
	ObjText_SetMaxWidth(objText, baseWidth_Umi-96-80);
	ObjText_SetFontBorderWidth(objText, 1);
	ObjText_SetFontBorderColor(objText, 64, 64, 64);
	ObjText_SetFontBorderType(objText, BORDER_SHADOW);
	
	ObjText_SetAutoTransCenter(objText, false);
	ObjRender_SetColor(objText, 255, 255, 255);
	return(objText);
}

// 吹き出しを設置する（フレーム＆名前）
function _MakeDescriptiveFrame_Umineko(t_priority)
{
	//吹き出しセット
	let objFukidashi = MakeDescriptiveObj_Umineko(0);
	Obj_SetRenderPriorityI(objFukidashi, t_priority);
	ObjRender_SetPosition(objFukidashi, baseX_Umi, baseY_Umi, 0);
	
	// 名前！
	let objName = DesText(t_priority);
	ObjText_SetTransCenter(objName, 0, baseHeight_Umi+36);
	ObjRender_SetPosition(objName, baseTextX_Umi+8, baseTextY_Umi-36, 0);
	ObjRender_SetColor(objName, 255, 255, 128);
	
	DescriptiveMotion(objFukidashi, objName);
	return(objFukidashi);
	
	task DescriptiveMotion(objFukidashi, objName)
	{
		ascent(i in 0 .. 10)
		{
			let tmp = (i+1)/10;
			ObjRender_SetScaleY(objFukidashi, tmp);
			ObjRender_SetScaleY(objName, tmp);
			ObjText_SetText(objName, Obj_GetValueD(objFukidashi, "NAME", ""));
			yield;
		}
		while(!Obj_IsDeleted(objFukidashi))
		{
			if (Obj_GetValueD(objFukidashi, "DELETED", false)) { break; }
			ObjText_SetText(objName, Obj_GetValueD(objFukidashi, "NAME", ""));
			yield;
		}
		descent(i in 0 .. 10)
		{
			let tmp = (i+1)/10;
			ObjRender_SetScaleY(objFukidashi, tmp);
			ObjRender_SetScaleY(objName, tmp);
			ObjText_SetText(objName, Obj_GetValueD(objFukidashi, "NAME", ""));
			yield;
		}
		Obj_Delete(objFukidashi);
		Obj_Delete(objName);
	}
}
function ChangeDescriptiveFrame_Umineko(obj, e_type)
{
	ObjSprite2D_SetSourceRect(obj, 0, 128*e_type, 512, 128*(e_type+1));
}

//吹き出しオブジェクト作成
function MakeDescriptiveObj_Umineko(e_type)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, imgEffectTFrame2);
	ObjSprite2D_SetSourceRect(obj, 0, 128*e_type, 512, 128*(e_type+1));
	ObjSprite2D_SetDestRect(obj, 0, -128, 512, 0);
	ObjRender_SetAlpha(obj, 192);
	return (obj);
}
